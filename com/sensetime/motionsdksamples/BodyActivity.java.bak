package com.sensetime.motionsdksamples;

import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.PorterDuff;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

//import com.sensetime.motion.Body;
//import com.sensetime.motion.BodyTracker;
//import com.sensetime.motion.PixelFormat;
//import com.sensetime.motion.StMotionException;
import com.sensetime.motionsdksamples.Common.BaseCameraFragment;
import com.sensetime.motionsdksamples.Utils.StUtils;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;

public class BodyActivity extends BaseCameraFragment {

    private static final String TAG = BaseCameraFragment.class.getSimpleName();

    //private BodyTracker mTracker = null;
    private float KEY_POINT_THRESHOLD = 0.15f;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        try {
            // Copy model from assets to internal storage
            String modelName = "Body_Track.model";
            mModelPath = getActivity().getFilesDir().getAbsolutePath() + File.separator + modelName;
            copyModelInAssets(modelName, mModelPath);
        } catch (IOException e) {
            e.printStackTrace();
            //showDialog("Fail to Copy Model", e.getMessage());
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        return super.onCreateView(inflater, container, savedInstanceState);
    }

    @Override
    public void onResume() {
        super.onResume();
        if (mTracker == null) {
            try {
                mTracker = new BodyTracker(mModelPath, 0);
            } catch (StMotionException e) {
                e.printStackTrace();
                //showDialog("Fail to Create Body Tracker", e.getMessage());
            }
        }
    }

    @Override
    public void onPause() {
        super.onPause();
        if (mTracker != null) {
            mTracker.release();
            mTracker = null;
        }
    }

    @Override
    protected void onPreviewFrame(byte[] data) {
        if (mTracker != null) {
            // The camera's preview format is set to ImageFormat.NV21,
            // the data shall be nv21 format, so we pass PixelFormat.NV21 here
            try {
                int orientation = getMotionOrientation();
                Body[] bodies = mTracker.track(data, PixelFormat.NV21, CAMERA_PREVIEW_WIDTH,
                        CAMERA_PREVIEW_HEIGHT, orientation);

                Canvas canvas = mOverlapSurfaceView.getHolder().lockCanvas();
                // Clear the canvas
                canvas.drawColor(0, PorterDuff.Mode.CLEAR);

                if (bodies.length > 0) {
                    // Detected bodies in this frame, let's draw them on the canvas
                    drawBodies(canvas, bodies);
                    String text = "";
                    for (int i = 0; i < bodies.length; i++) {
                        Body body = bodies[i];
                        text += String.format("Body[%d]:\nkeyPoints: %s\n", i,
                                Arrays.toString(body.getKeypoints()));
                    }
                    //mtextViewInfo.setText(text);
                } else {
                    //mtextViewInfo.setText("No Body detected");
                }

                mOverlapSurfaceView.getHolder().unlockCanvasAndPost(canvas);
            } catch (StMotionException e) {
                e.printStackTrace();
            }
        }
    }

    private void drawBodies(Canvas canvas, Body[] bodies) {
        if(canvas == null) {
            return;
        }
        canvas.setMatrix(getMatrix());
        Paint paint = new Paint();

        for (Body body : bodies) {
            paint.setColor(Color.RED);
            paint.setStyle(Paint.Style.FILL);
            int rotate = getRotate();
            float[] keypoints = null;
            if(rotate == 90) {
                keypoints = StUtils.rotateDeg90(body, CAMERA_PREVIEW_WIDTH,CAMERA_PREVIEW_HEIGHT);
            }else if(rotate == 270) {
                keypoints = StUtils.rotateDeg270(body, CAMERA_PREVIEW_WIDTH,CAMERA_PREVIEW_HEIGHT);
            }else{
                keypoints = body.getKeypoints();
            }

            float[] keypointScores = body.getKeypointScores();

            float[] mappedPoints = new float[keypoints.length];
            for (int i = 0; i < keypoints.length; i+=2) {
                // The preview for frontal camera is mirrored image
                mappedPoints[i] = keypoints[i];
                mappedPoints[i + 1] = CAMERA_PREVIEW_WIDTH - keypoints[i + 1];
                // Draw keypoints of detected body
                if(keypointScores[i/2] > KEY_POINT_THRESHOLD) {
                    canvas.drawCircle(mappedPoints[i], mappedPoints[i + 1], 20, paint);
                }
            }

            // Draw skeletons
            paint.setColor(Color.GREEN);
            paint.setStrokeWidth(20);
            paint.setStyle(Paint.Style.STROKE);

            int limbs[][] = {{0,1},{2,3},{3,4},{5,6},{6,7},{8,9},{9,10},{11,12},{12,13},{2,5},{8,11}};

            for(int i = 0; i <  limbs.length; i++) {
                int a = limbs[i][0];
                int b = limbs[i][1];
                if(keypointScores[a] > KEY_POINT_THRESHOLD && keypointScores[b] > KEY_POINT_THRESHOLD) {
                    canvas.drawLine(mappedPoints[a * 2], mappedPoints[a * 2 + 1],
                            mappedPoints[b * 2], mappedPoints[b * 2 + 1], paint);
                }
            }
        }

    }
}
